openapi: 3.0.3
info:
    title: Swagger Petstore - OpenAPI 3.0
    description: |-
        This is the OpenAPI 3 spec for the Mayhem WebSocket & HTTP REST API.

        Some useful links:
        - [The Mayhem repository](https://github.com/RedstoneWizard08/mayhem)
        - [The source OpenAPI file](https://github.com/RedstoneWizard08/mayhem/blob/main/openapi.yaml)
    license:
        name: MIT
        url: https://opensource.org/license/mit/
    version: 1.0.11
servers:
    - url: "{protocol}://{host}:{port}/api"
      variables:
          protocol:
              default: http
              enum:
                  - http
                  - https
          host:
              default: localhost
          port:
              default: "4000"
tags:
    - name: Authentication
      description: Actions related to logging in and registering with Mayhem.
    - name: Connection
      description: Actions related to connecting to Mayhem.
    - name: Servers
      description: Actions related to servers.
    - name: Channels
      description: Actions related to channels.
    - name: Messages
      description: Actions related to messages.
paths:
    /users:
        put:
            tags:
                - Authentication
            summary: Register for a new account.
            operationId: registerAcct
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UserCreation"
                required: true
            responses:
                "409":
                    description: User already exists.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BasicResponseError"
                "200":
                    description: User created.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PasswordlessActiveUser"
        post:
            tags:
                - Authentication
            summary: Login to an account.
            operationId: loginUser
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/LoginInfo"
                required: true
            responses:
                "401":
                    description: Invalid password.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BasicResponseError"
                "400":
                    description: User not found!
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BasicResponseError"
                "200":
                    description: Login success.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PasswordlessUser"
    /users/token:
        post:
            tags:
                - Authentication
            summary: Gets a user from a token.
            operationId: getUserByToken
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/TokenInfo"
                required: true
            responses:
                "400":
                    description: User not found.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BasicResponseError"
                "200":
                    description: Token fetched.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PasswordlessUser"
    /token:
        post:
            tags:
                - Authentication
            summary: Request a token for your account.
            operationId: getToken
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/LoginInfo"
                required: true
            responses:
                "500":
                    description: Could not update the user.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BasicResponseError"
                "401":
                    description: Invalid password.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BasicResponseError"
                "400":
                    description: User not found.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BasicResponseError"
                "200":
                    description: Token fetched.
                    content:
                        application/json:
                            schema:
                                type: string
                                example: "[INSERT TOKEN HERE]"
    /users/{id}:
        get:
            tags:
                - Authentication
            summary: Gets a user's info.
            operationId: getUser
            parameters:
                - name: id
                  in: path
                  description: The user's ID.
                  required: true
                  schema:
                      type: integer
                      format: int64
            responses:
                "400":
                    description: Invalid user.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BasicResponseError"
                "200":
                    description: User found.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PasswordlessUser"
components:
    schemas:
        UserCreation:
            type: object
            properties:
                first_name:
                    type: string
                    description: The user's first name.
                    example: John
                last_name:
                    type: string
                    description: The user's last name.
                    example: Doe
                email:
                    type: string
                    description: The user's email.
                    example: john.doe@example.com
                username:
                    type: string
                    description: Your username.
                    example: JohnDoe123
                password:
                    type: string
                    description: Your password.
                    example: J0hnD031$C0Ol!
        LoginInfo:
            type: object
            properties:
                username:
                    type: string
                    description: Your username.
                    example: JohnDoe123
                password:
                    type: string
                    description: Your password.
                    example: J0hnD031$C0Ol!
        BasicResponseError:
            type: object
            properties:
                code:
                    type: integer
                    format: int64
                    example: 400
                message:
                    type: string
                    example: "[INSERT ERROR HERE]"
        PasswordlessActiveUser:
            type: object
            properties:
                id:
                    type: integer
                    format: int64
                first_name:
                    type: string
                    example: John
                last_name:
                    type: string
                    example: Doe
                email:
                    type: string
                    example: john.doe@example.com
                username:
                    type: string
                    example: JohnDoe123
                token:
                    type: string
                    example: "[INSERT AUTH TOKEN HERE]"
        PasswordlessUser:
            type: object
            properties:
                id:
                    type: integer
                    format: int64
                first_name:
                    type: string
                    example: John
                last_name:
                    type: string
                    example: Doe
                email:
                    type: string
                    example: john.doe@example.com
                username:
                    type: string
                    example: JohnDoe123
                servers:
                    type: array
                    items:
                        $ref: "#/components/schemas/CompleteServer"
        CompleteServer:
            type: object
            properties:
                id:
                    type: integer
                    format: int64
                name:
                    type: string
                roles:
                    type: array
                    items:
                        $ref: "#/components/schemas/CompleteRole"
                members:
                    type: array
                    items:
                        $ref: "#/components/schemas/CompleteMember"
                channels:
                    type: array
                    items:
                        $ref: "#/components/schemas/Channel"
        CompleteRole:
            type: object
            properties:
                id:
                    type: integer
                    format: int64
                name:
                    type: string
                server_id:
                    type: integer
                    format: int64
                member_ids:
                    type: array
                    items:
                        type: number
                        format: int64
        CompleteMember:
            type: object
            properties:
                id:
                    type: integer
                    format: int64
                name:
                    type: string
                nick:
                    type: string
                role_ids:
                    type: array
                    items:
                        type: integer
                        format: int64
                server_id:
                    type: integer
                    format: int64
        Channel:
            type: object
            properties:
                id:
                    type: integer
                    format: int64
                name:
                    type: string
                server_id:
                    type: integer
                    format: int64
                channel_type:
                    type: string
        TokenInfo:
            type: object
            properties:
                token:
                    type: string
    securitySchemes:
        token:
            type: apiKey
            name: Authorization
            in: header
